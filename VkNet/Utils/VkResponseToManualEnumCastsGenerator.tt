<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
// Autogenerated at <#= DateTime.Now.ToString() #>
// DO NOT EDIT THIS FILE CAUSE ALL CHANGES WILL BE DELETED AUTOMATICALLY
using VkNet.Enums;
namespace VkNet.Utils
{
	public partial class VkResponse
	{
<#
	var path = Directory.GetParent(Host.ResolvePath("")) + @"\Enums";
	var files = Directory.GetFiles(path, "*.cs", SearchOption.AllDirectories).ToList();
	const string typePattern = @"enum\s+(\w+)";
	const string defaultValuePattern = @"\[DefaultValue\](?:\s*\[\w+[^\]]*\]){0,}\s*?([a-zA-Z][a-zA-Z0-9]*)";
	const RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace;

	foreach (var file in files)
	{
		var text = File.ReadAllText(file);

		var matches = Regex.Match(text, typePattern, options);
		if (!matches.Success)
		{
			continue;
		}

		var type = Regex.Replace(matches.ToString(), typePattern, @"$1", options);
		var value = Regex.Match(text, defaultValuePattern, options).ToString();
		value = Regex.Replace(value, defaultValuePattern, @"$1", options);

		if (string.IsNullOrWhiteSpace(value))
		{
			continue;
		}

		if(type == "DeleteFriendStatus")
		{
#>
		public static implicit operator <#= type #>(VkResponse response)
		{
			if (response == null || response["success"] == 0)
				return <#= type #>.Unknown;
			if ((response["in_request_deleted"] != null && response["in_request_deleted"] == 1)
				|| (response["out_request_deleted"] != null && response["out_request_deleted"] == 1))
				return <#= type #>.RequestRejected;
			if (response["suggestion_deleted"] != null && response["suggestion_deleted"] == 1)
				return <#= type #>.RecommendationDeleted;
			if (response["friend_deleted"] != null && response["friend_deleted"] == 1)
				return <#= type #>.UserIsDeleted;
			return <#= type #>.Unknown;
		}

<#
		}
		else
		{
#>
		public static implicit operator <#= type #>(VkResponse response)
		{
			if (response == null)
			{
				return <#= type #>.<#= value #>;
			}

			return Utilities.EnumFrom<<#= type #>>(response);
		}

<#
}
	}
#>
	}
}